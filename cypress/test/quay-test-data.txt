pg_dump: warning: there are circular foreign-key constraints on this table:
pg_dump:   apprtag
pg_dump: You might not be able to restore the dump without using --disable-triggers or temporarily dropping the constraints.
pg_dump: Consider using a full dump instead of a --data-only dump to avoid this problem.
pg_dump: warning: there are circular foreign-key constraints on this table:
pg_dump:   tag
pg_dump: You might not be able to restore the dump without using --disable-triggers or temporarily dropping the constraints.
pg_dump: Consider using a full dump instead of a --data-only dump to avoid this problem.
pg_dump: warning: there are circular foreign-key constraints on this table:
pg_dump:   repomirrorrule
pg_dump: You might not be able to restore the dump without using --disable-triggers or temporarily dropping the constraints.
pg_dump: Consider using a full dump instead of a --data-only dump to avoid this problem.
--
-- PostgreSQL database dump
--

-- Dumped from database version 12.1 (Debian 12.1-1.pgdg100+1)
-- Dumped by pg_dump version 12.1 (Debian 12.1-1.pgdg100+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Data for Name: accesstokenkind; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.accesstokenkind (id, name) FROM stdin;
1	build-worker
2	pushpull-token
\.


--
-- Data for Name: repositorykind; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositorykind (id, name) FROM stdin;
1	image
2	application
\.


--
-- Data for Name: user; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public."user" (id, uuid, username, password_hash, email, verified, stripe_id, organization, robot, invoice_email, invalid_login_attempts, last_invalid_login, removed_tag_expiration_s, enabled, invoice_email_address, company, family_name, given_name, location, maximum_queued_builds_count, creation_date, last_accessed) FROM stdin;
1	a25d6484-cf99-46d4-9e2e-e2e1f1d769fa	user1	$2b$12$c4u19A/x6a.6Ihm2pAin7.nXUCIqI0vtf7miS7tZ.oXhHtsKVS.Bq	user1@redhat.com	t	\N	f	f	f	0	2022-10-31 18:50:36.685961	1209600	t	\N	\N	\N	\N	\N	\N	2022-10-31 18:50:36.685976	\N
\.


--
-- Data for Name: visibility; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.visibility (id, name) FROM stdin;
1	public
2	private
\.


--
-- Data for Name: repository; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repository (id, namespace_user_id, name, visibility_id, description, badge_token, kind_id, trust_enabled, state) FROM stdin;
\.


--
-- Data for Name: role; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.role (id, name) FROM stdin;
1	admin
2	write
3	read
\.


--
-- Data for Name: accesstoken; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.accesstoken (id, friendly_name, repository_id, created, role_id, temporary, kind_id, token_code, token_name) FROM stdin;
\.


--
-- Data for Name: alembic_version; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.alembic_version (version_num) FROM stdin;
2d66ad598b56
\.


--
-- Data for Name: mediatype; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.mediatype (id, name) FROM stdin;
1	text/plain
2	application/json
3	text/markdown
4	application/vnd.cnr.blob.v0.tar+gzip
5	application/vnd.cnr.package-manifest.helm.v0.json
6	application/vnd.cnr.package-manifest.kpm.v0.json
7	application/vnd.cnr.package-manifest.docker-compose.v0.json
8	application/vnd.cnr.package.kpm.v0.tar+gzip
9	application/vnd.cnr.package.helm.v0.tar+gzip
10	application/vnd.cnr.package.docker-compose.v0.tar+gzip
11	application/vnd.cnr.manifests.v0.json
12	application/vnd.cnr.manifest.list.v0.json
13	application/vnd.docker.distribution.manifest.v1+prettyjws
14	application/vnd.docker.distribution.manifest.v1+json
15	application/vnd.docker.distribution.manifest.v2+json
16	application/vnd.docker.distribution.manifest.list.v2+json
17	application/vnd.oci.image.index.v1+json
18	application/vnd.oci.image.manifest.v1+json
\.


--
-- Data for Name: apprblob; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.apprblob (id, digest, media_type_id, size, uncompressed_size) FROM stdin;
\.


--
-- Data for Name: apprblobplacementlocation; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.apprblobplacementlocation (id, name) FROM stdin;
1	local_eu
2	local_us
3	default
\.


--
-- Data for Name: apprblobplacement; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.apprblobplacement (id, blob_id, location_id) FROM stdin;
\.


--
-- Data for Name: apprmanifest; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.apprmanifest (id, digest, media_type_id, manifest_json) FROM stdin;
\.


--
-- Data for Name: apprmanifestblob; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.apprmanifestblob (id, manifest_id, blob_id) FROM stdin;
\.


--
-- Data for Name: apprmanifestlist; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.apprmanifestlist (id, digest, manifest_list_json, schema_version, media_type_id) FROM stdin;
\.


--
-- Data for Name: apprmanifestlistmanifest; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.apprmanifestlistmanifest (id, manifest_list_id, manifest_id, operating_system, architecture, platform_json, media_type_id) FROM stdin;
\.


--
-- Data for Name: apprtagkind; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.apprtagkind (id, name) FROM stdin;
1	tag
2	release
3	channel
\.


--
-- Data for Name: apprtag; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.apprtag (id, name, repository_id, manifest_list_id, lifetime_start, lifetime_end, hidden, reverted, protected, tag_kind_id, linked_tag_id) FROM stdin;
\.


--
-- Data for Name: appspecificauthtoken; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.appspecificauthtoken (id, user_id, uuid, title, created, expiration, last_accessed, token_name, token_secret) FROM stdin;
\.


--
-- Data for Name: imagestoragelocation; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.imagestoragelocation (id, name) FROM stdin;
1	s3_us_east_1
2	s3_eu_west_1
3	s3_ap_southeast_1
4	s3_ap_southeast_2
5	s3_ap_northeast_1
6	s3_sa_east_1
7	local
8	s3_us_west_1
9	default
\.


--
-- Data for Name: blobupload; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.blobupload (id, repository_id, uuid, byte_count, sha_state, location_id, storage_metadata, chunk_count, uncompressed_byte_count, created, piece_sha_state, piece_hashes) FROM stdin;
\.


--
-- Data for Name: buildtriggerservice; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.buildtriggerservice (id, name) FROM stdin;
1	github
2	gitlab
3	bitbucket
4	custom-git
\.


--
-- Data for Name: deletednamespace; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.deletednamespace (id, namespace_id, marked, original_username, original_email, queue_id) FROM stdin;
\.


--
-- Data for Name: deletedrepository; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.deletedrepository (id, repository_id, marked, original_name, queue_id) FROM stdin;
\.


--
-- Data for Name: imagestorage; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.imagestorage (id, uuid, image_size, uncompressed_size, uploading, cas_path, content_checksum) FROM stdin;
\.


--
-- Data for Name: image; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.image (id, docker_image_id, repository_id, ancestors, storage_id, created, comment, command, aggregate_size, v1_json_metadata, v1_checksum, security_indexed, security_indexed_engine, parent_id) FROM stdin;
\.


--
-- Data for Name: imagestoragetransformation; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.imagestoragetransformation (id, name) FROM stdin;
1	squash
2	aci
\.


--
-- Data for Name: derivedstorageforimage; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.derivedstorageforimage (id, source_image_id, derivative_id, transformation_id, uniqueness_hash) FROM stdin;
\.


--
-- Data for Name: disablereason; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.disablereason (id, name) FROM stdin;
1	user_toggled
2	successive_build_failures
3	successive_build_internal_errors
\.


--
-- Data for Name: emailconfirmation; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.emailconfirmation (id, code, user_id, pw_reset, new_email, email_confirm, created, verification_code) FROM stdin;
\.


--
-- Data for Name: externalnotificationevent; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.externalnotificationevent (id, name) FROM stdin;
1	build_failure
2	build_queued
3	build_start
4	build_success
5	repo_push
6	vulnerability_found
7	build_cancelled
8	repo_mirror_sync_started
9	repo_mirror_sync_success
10	repo_mirror_sync_failed
\.


--
-- Data for Name: externalnotificationmethod; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.externalnotificationmethod (id, name) FROM stdin;
1	email
2	flowdock
3	hipchat
4	quay_notification
5	slack
6	webhook
\.


--
-- Data for Name: loginservice; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.loginservice (id, name) FROM stdin;
1	github
2	quayrobot
3	ldap
4	google
5	keystone
6	dex
7	jwtauthn
\.


--
-- Data for Name: federatedlogin; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.federatedlogin (id, user_id, service_id, service_ident, metadata_json) FROM stdin;
\.


--
-- Data for Name: imagestorageplacement; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.imagestorageplacement (id, storage_id, location_id) FROM stdin;
\.


--
-- Data for Name: imagestoragesignaturekind; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.imagestoragesignaturekind (id, name) FROM stdin;
1	gpg2
\.


--
-- Data for Name: imagestoragesignature; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.imagestoragesignature (id, storage_id, kind_id, signature, uploading) FROM stdin;
\.


--
-- Data for Name: labelsourcetype; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.labelsourcetype (id, name, mutable) FROM stdin;
1	manifest	f
2	api	t
3	internal	f
\.


--
-- Data for Name: label; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.label (id, uuid, key, value, media_type_id, source_type_id) FROM stdin;
\.


--
-- Data for Name: logentrykind; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.logentrykind (id, name) FROM stdin;
1	account_change_cc
2	account_change_password
3	account_change_plan
4	account_convert
5	add_repo_accesstoken
6	add_repo_notification
7	add_repo_permission
8	add_repo_webhook
9	build_dockerfile
10	change_repo_permission
11	change_repo_visibility
12	create_application
13	create_prototype_permission
14	create_repo
15	create_robot
16	create_tag
17	delete_application
18	delete_prototype_permission
19	delete_repo
20	delete_repo_accesstoken
21	delete_repo_notification
22	delete_repo_permission
23	delete_repo_trigger
24	delete_repo_webhook
25	delete_robot
26	delete_tag
27	manifest_label_add
28	manifest_label_delete
29	modify_prototype_permission
30	move_tag
31	org_add_team_member
32	org_create_team
33	org_delete_team
34	org_delete_team_member_invite
35	org_invite_team_member
36	org_remove_team_member
37	org_set_team_description
38	org_set_team_role
39	org_team_member_invite_accepted
40	org_team_member_invite_declined
41	pull_repo
42	push_repo
43	regenerate_robot_token
44	repo_verb
45	reset_application_client_secret
46	revert_tag
47	service_key_approve
48	service_key_create
49	service_key_delete
50	service_key_extend
51	service_key_modify
52	service_key_rotate
53	setup_repo_trigger
54	set_repo_description
55	take_ownership
56	update_application
57	change_repo_trust
58	reset_repo_notification
59	change_tag_expiration
60	create_app_specific_token
61	revoke_app_specific_token
62	toggle_repo_trigger
63	repo_mirror_enabled
64	repo_mirror_disabled
65	repo_mirror_config_changed
66	repo_mirror_sync_started
67	repo_mirror_sync_failed
68	repo_mirror_sync_success
69	repo_mirror_sync_now_requested
70	repo_mirror_sync_tag_success
71	repo_mirror_sync_tag_failed
72	repo_mirror_sync_test_success
73	repo_mirror_sync_test_failed
74	repo_mirror_sync_test_started
75	change_repo_state
\.


--
-- Data for Name: logentry; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.logentry (id, kind_id, account_id, performer_id, repository_id, datetime, ip, metadata_json) FROM stdin;
\.


--
-- Data for Name: logentry2; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.logentry2 (id, kind_id, account_id, performer_id, repository_id, datetime, ip, metadata_json) FROM stdin;
\.


--
-- Data for Name: logentry3; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.logentry3 (id, kind_id, account_id, performer_id, repository_id, datetime, ip, metadata_json) FROM stdin;
\.


--
-- Data for Name: manifest; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.manifest (id, repository_id, digest, media_type_id, manifest_bytes, config_media_type, layers_compressed_size) FROM stdin;
\.


--
-- Data for Name: manifestblob; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.manifestblob (id, repository_id, manifest_id, blob_id) FROM stdin;
\.


--
-- Data for Name: manifestchild; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.manifestchild (id, repository_id, manifest_id, child_manifest_id) FROM stdin;
\.


--
-- Data for Name: manifestlabel; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.manifestlabel (id, repository_id, manifest_id, label_id) FROM stdin;
\.


--
-- Data for Name: manifestlegacyimage; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.manifestlegacyimage (id, repository_id, manifest_id, image_id) FROM stdin;
\.


--
-- Data for Name: manifestsecuritystatus; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.manifestsecuritystatus (id, manifest_id, repository_id, index_status, error_json, last_indexed, indexer_hash, indexer_version, metadata_json) FROM stdin;
\.


--
-- Data for Name: messages; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.messages (id, content, uuid, media_type_id, severity) FROM stdin;
\.


--
-- Data for Name: namespacegeorestriction; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.namespacegeorestriction (id, namespace_id, added, description, unstructured_json, restricted_region_iso_code) FROM stdin;
\.


--
-- Data for Name: notificationkind; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.notificationkind (id, name) FROM stdin;
1	build_failure
2	build_queued
3	build_start
4	build_success
5	expiring_license
6	maintenance
7	org_team_invite
8	over_private_usage
9	password_required
10	repo_push
11	service_key_submitted
12	vulnerability_found
13	build_cancelled
14	repo_mirror_sync_started
15	repo_mirror_sync_success
16	repo_mirror_sync_failed
17	quota_warning
18	quota_error
\.


--
-- Data for Name: notification; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.notification (id, uuid, kind_id, target_id, metadata_json, created, dismissed, lookup_path) FROM stdin;
\.


--
-- Data for Name: oauthapplication; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.oauthapplication (id, client_id, redirect_uri, application_uri, organization_id, name, description, gravatar_email, secure_client_secret, fully_migrated) FROM stdin;
\.


--
-- Data for Name: oauthaccesstoken; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.oauthaccesstoken (id, uuid, application_id, authorized_user_id, scope, token_type, expires_at, data, token_code, token_name) FROM stdin;
\.


--
-- Data for Name: oauthauthorizationcode; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.oauthauthorizationcode (id, application_id, scope, data, code_credential, code_name) FROM stdin;
\.


--
-- Data for Name: teamrole; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.teamrole (id, name) FROM stdin;
1	admin
2	creator
3	member
\.


--
-- Data for Name: team; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.team (id, name, organization_id, role_id, description) FROM stdin;
\.


--
-- Data for Name: permissionprototype; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.permissionprototype (id, org_id, uuid, activating_user_id, delegate_user_id, delegate_team_id, role_id) FROM stdin;
\.


--
-- Data for Name: proxycacheconfig; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.proxycacheconfig (id, organization_id, creation_date, upstream_registry, upstream_registry_username, upstream_registry_password, expiration_s, insecure) FROM stdin;
\.


--
-- Data for Name: quayregion; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.quayregion (id, name) FROM stdin;
\.


--
-- Data for Name: quayservice; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.quayservice (id, name) FROM stdin;
\.


--
-- Data for Name: quayrelease; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.quayrelease (id, service_id, version, region_id, reverted, created) FROM stdin;
\.


--
-- Data for Name: queueitem; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.queueitem (id, queue_name, body, available_after, available, processing_expires, retries_remaining, state_id) FROM stdin;
\.


--
-- Data for Name: quotatype; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.quotatype (id, name) FROM stdin;
1	Warning
2	Reject
\.


--
-- Data for Name: userorganizationquota; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.userorganizationquota (id, namespace_id, limit_bytes) FROM stdin;
\.


--
-- Data for Name: quotalimits; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.quotalimits (id, quota_id, quota_type_id, percent_of_limit) FROM stdin;
\.


--
-- Data for Name: repomirrorrule; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repomirrorrule (id, uuid, repository_id, creation_date, rule_type, rule_value, left_child_id, right_child_id) FROM stdin;
\.


--
-- Data for Name: repomirrorconfig; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repomirrorconfig (id, repository_id, creation_date, is_enabled, mirror_type, internal_robot_id, external_registry_username, external_registry_password, external_registry_config, sync_interval, sync_start_date, sync_expiration_date, sync_retries_remaining, sync_status, sync_transaction_id, root_rule_id, external_reference) FROM stdin;
\.


--
-- Data for Name: repositoryactioncount; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositoryactioncount (id, repository_id, count, date) FROM stdin;
\.


--
-- Data for Name: repositoryauthorizedemail; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositoryauthorizedemail (id, repository_id, email, code, confirmed) FROM stdin;
\.


--
-- Data for Name: repositorybuildtrigger; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositorybuildtrigger (id, uuid, service_id, repository_id, connected_user_id, config, write_token_id, pull_robot_id, disabled_reason_id, enabled, successive_failure_count, successive_internal_error_count, disabled_datetime, secure_auth_token, secure_private_key, fully_migrated) FROM stdin;
\.


--
-- Data for Name: repositorybuild; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositorybuild (id, uuid, repository_id, access_token_id, resource_key, job_config, phase, started, display_name, trigger_id, pull_robot_id, logs_archived, queue_id) FROM stdin;
\.


--
-- Data for Name: repositorynotification; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositorynotification (id, uuid, repository_id, event_id, method_id, title, config_json, event_config_json, number_of_failures) FROM stdin;
\.


--
-- Data for Name: repositorypermission; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositorypermission (id, team_id, user_id, repository_id, role_id) FROM stdin;
\.


--
-- Data for Name: repositorysearchscore; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositorysearchscore (id, repository_id, score, last_updated) FROM stdin;
\.


--
-- Data for Name: repositorysize; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositorysize (id, repository_id, size_bytes) FROM stdin;
\.


--
-- Data for Name: repositorytag; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.repositorytag (id, name, image_id, repository_id, lifetime_start_ts, lifetime_end_ts, hidden, reversion) FROM stdin;
\.


--
-- Data for Name: robotaccountmetadata; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.robotaccountmetadata (id, robot_account_id, description, unstructured_json) FROM stdin;
\.


--
-- Data for Name: robotaccounttoken; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.robotaccounttoken (id, robot_account_id, token, fully_migrated) FROM stdin;
\.


--
-- Data for Name: servicekeyapproval; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.servicekeyapproval (id, approver_id, approval_type, approved_date, notes) FROM stdin;
1	\N	ServiceKeyApprovalType.AUTOMATIC	2022-10-31 18:47:47.477647	
2	\N	ServiceKeyApprovalType.AUTOMATIC	2022-10-31 18:49:21.062363	
\.


--
-- Data for Name: servicekey; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.servicekey (id, name, kid, service, jwk, metadata, created_date, expiration_date, rotation_duration, approval_id) FROM stdin;
\.


--
-- Data for Name: star; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.star (id, user_id, repository_id, created) FROM stdin;
\.


--
-- Data for Name: tagkind; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.tagkind (id, name) FROM stdin;
1	tag
\.


--
-- Data for Name: tag; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.tag (id, name, repository_id, manifest_id, lifetime_start_ms, lifetime_end_ms, hidden, reversion, tag_kind_id, linked_tag_id) FROM stdin;
\.


--
-- Data for Name: tagmanifest; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.tagmanifest (id, tag_id, digest, json_data) FROM stdin;
\.


--
-- Data for Name: tagmanifestlabel; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.tagmanifestlabel (id, repository_id, annotated_id, label_id) FROM stdin;
\.


--
-- Data for Name: tagmanifestlabelmap; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.tagmanifestlabelmap (id, tag_manifest_id, manifest_id, label_id, tag_manifest_label_id, manifest_label_id, broken_manifest) FROM stdin;
\.


--
-- Data for Name: tagmanifesttomanifest; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.tagmanifesttomanifest (id, tag_manifest_id, manifest_id, broken) FROM stdin;
\.


--
-- Data for Name: tagtorepositorytag; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.tagtorepositorytag (id, repository_id, tag_id, repository_tag_id) FROM stdin;
\.


--
-- Data for Name: teammember; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.teammember (id, user_id, team_id) FROM stdin;
\.


--
-- Data for Name: teammemberinvite; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.teammemberinvite (id, user_id, email, team_id, inviter_id, invite_token) FROM stdin;
\.


--
-- Data for Name: teamsync; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.teamsync (id, team_id, transaction_id, last_updated, service_id, config) FROM stdin;
\.


--
-- Data for Name: torrentinfo; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.torrentinfo (id, storage_id, piece_length, pieces) FROM stdin;
\.


--
-- Data for Name: uploadedblob; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.uploadedblob (id, repository_id, blob_id, uploaded_at, expires_at) FROM stdin;
\.


--
-- Data for Name: userpromptkind; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.userpromptkind (id, name) FROM stdin;
1	confirm_username
2	enter_name
3	enter_company
\.


--
-- Data for Name: userprompt; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.userprompt (id, user_id, kind_id) FROM stdin;
\.


--
-- Data for Name: userregion; Type: TABLE DATA; Schema: public; Owner: quay
--

COPY public.userregion (id, user_id, location_id) FROM stdin;
\.


--
-- Name: accesstoken_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.accesstoken_id_seq', 1, false);


--
-- Name: accesstokenkind_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.accesstokenkind_id_seq', 2, true);


--
-- Name: apprblob_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.apprblob_id_seq', 1, false);


--
-- Name: apprblobplacement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.apprblobplacement_id_seq', 1, false);


--
-- Name: apprblobplacementlocation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.apprblobplacementlocation_id_seq', 3, true);


--
-- Name: apprmanifest_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.apprmanifest_id_seq', 1, false);


--
-- Name: apprmanifestblob_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.apprmanifestblob_id_seq', 1, false);


--
-- Name: apprmanifestlist_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.apprmanifestlist_id_seq', 1, false);


--
-- Name: apprmanifestlistmanifest_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.apprmanifestlistmanifest_id_seq', 1, false);


--
-- Name: apprtag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.apprtag_id_seq', 1, false);


--
-- Name: apprtagkind_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.apprtagkind_id_seq', 4, false);


--
-- Name: appspecificauthtoken_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.appspecificauthtoken_id_seq', 1, false);


--
-- Name: blobupload_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.blobupload_id_seq', 1, false);


--
-- Name: buildtriggerservice_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.buildtriggerservice_id_seq', 4, true);


--
-- Name: deletednamespace_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.deletednamespace_id_seq', 1, false);


--
-- Name: deletedrepository_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.deletedrepository_id_seq', 1, false);


--
-- Name: derivedstorageforimage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.derivedstorageforimage_id_seq', 1, false);


--
-- Name: disablereason_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.disablereason_id_seq', 1, false);


--
-- Name: emailconfirmation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.emailconfirmation_id_seq', 1, false);


--
-- Name: externalnotificationevent_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.externalnotificationevent_id_seq', 10, true);


--
-- Name: externalnotificationmethod_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.externalnotificationmethod_id_seq', 6, true);


--
-- Name: federatedlogin_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.federatedlogin_id_seq', 1, false);


--
-- Name: image_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.image_id_seq', 1, false);


--
-- Name: imagestorage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.imagestorage_id_seq', 1, false);


--
-- Name: imagestoragelocation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.imagestoragelocation_id_seq', 9, true);


--
-- Name: imagestorageplacement_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.imagestorageplacement_id_seq', 1, false);


--
-- Name: imagestoragesignature_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.imagestoragesignature_id_seq', 1, false);


--
-- Name: imagestoragesignaturekind_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.imagestoragesignaturekind_id_seq', 1, true);


--
-- Name: imagestoragetransformation_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.imagestoragetransformation_id_seq', 2, true);


--
-- Name: label_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.label_id_seq', 1, false);


--
-- Name: labelsourcetype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.labelsourcetype_id_seq', 3, true);


--
-- Name: logentry2_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.logentry2_id_seq', 1, false);


--
-- Name: logentry3_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.logentry3_id_seq', 1, false);


--
-- Name: logentry_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.logentry_id_seq', 1, false);


--
-- Name: logentrykind_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.logentrykind_id_seq', 75, true);


--
-- Name: loginservice_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.loginservice_id_seq', 7, true);


--
-- Name: manifest_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.manifest_id_seq', 1, false);


--
-- Name: manifestblob_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.manifestblob_id_seq', 1, false);


--
-- Name: manifestchild_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.manifestchild_id_seq', 1, false);


--
-- Name: manifestlabel_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.manifestlabel_id_seq', 1, false);


--
-- Name: manifestlegacyimage_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.manifestlegacyimage_id_seq', 1, false);


--
-- Name: manifestsecuritystatus_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.manifestsecuritystatus_id_seq', 1, false);


--
-- Name: mediatype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.mediatype_id_seq', 18, true);


--
-- Name: messages_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.messages_id_seq', 1, false);


--
-- Name: namespacegeorestriction_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.namespacegeorestriction_id_seq', 1, false);


--
-- Name: notification_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.notification_id_seq', 1, false);


--
-- Name: notificationkind_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.notificationkind_id_seq', 18, true);


--
-- Name: oauthaccesstoken_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.oauthaccesstoken_id_seq', 1, false);


--
-- Name: oauthapplication_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.oauthapplication_id_seq', 1, false);


--
-- Name: oauthauthorizationcode_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.oauthauthorizationcode_id_seq', 1, false);


--
-- Name: permissionprototype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.permissionprototype_id_seq', 1, false);


--
-- Name: proxycacheconfig_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.proxycacheconfig_id_seq', 1, false);


--
-- Name: quayregion_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.quayregion_id_seq', 1, false);


--
-- Name: quayrelease_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.quayrelease_id_seq', 1, false);


--
-- Name: quayservice_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.quayservice_id_seq', 1, false);


--
-- Name: queueitem_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.queueitem_id_seq', 1, false);


--
-- Name: quotalimits_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.quotalimits_id_seq', 1, false);


--
-- Name: quotatype_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.quotatype_id_seq', 2, true);


--
-- Name: repomirrorconfig_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repomirrorconfig_id_seq', 1, false);


--
-- Name: repomirrorrule_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repomirrorrule_id_seq', 1, false);


--
-- Name: repository_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repository_id_seq', 1, false);


--
-- Name: repositoryactioncount_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositoryactioncount_id_seq', 1, false);


--
-- Name: repositoryauthorizedemail_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositoryauthorizedemail_id_seq', 1, false);


--
-- Name: repositorybuild_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositorybuild_id_seq', 1, false);


--
-- Name: repositorybuildtrigger_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositorybuildtrigger_id_seq', 1, false);


--
-- Name: repositorykind_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositorykind_id_seq', 1, false);


--
-- Name: repositorynotification_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositorynotification_id_seq', 1, false);


--
-- Name: repositorypermission_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositorypermission_id_seq', 1, false);


--
-- Name: repositorysearchscore_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositorysearchscore_id_seq', 1, false);


--
-- Name: repositorysize_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositorysize_id_seq', 1, false);


--
-- Name: repositorytag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.repositorytag_id_seq', 1, false);


--
-- Name: robotaccountmetadata_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.robotaccountmetadata_id_seq', 1, false);


--
-- Name: robotaccounttoken_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.robotaccounttoken_id_seq', 1, false);


--
-- Name: role_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.role_id_seq', 3, true);


--
-- Name: servicekey_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.servicekey_id_seq', 2, true);


--
-- Name: servicekeyapproval_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.servicekeyapproval_id_seq', 2, true);


--
-- Name: star_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.star_id_seq', 1, false);


--
-- Name: tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.tag_id_seq', 1, false);


--
-- Name: tagkind_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.tagkind_id_seq', 1, true);


--
-- Name: tagmanifest_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.tagmanifest_id_seq', 1, false);


--
-- Name: tagmanifestlabel_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.tagmanifestlabel_id_seq', 1, false);


--
-- Name: tagmanifestlabelmap_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.tagmanifestlabelmap_id_seq', 1, false);


--
-- Name: tagmanifesttomanifest_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.tagmanifesttomanifest_id_seq', 1, false);


--
-- Name: tagtorepositorytag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.tagtorepositorytag_id_seq', 1, false);


--
-- Name: team_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.team_id_seq', 1, false);


--
-- Name: teammember_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.teammember_id_seq', 1, false);


--
-- Name: teammemberinvite_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.teammemberinvite_id_seq', 1, false);


--
-- Name: teamrole_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.teamrole_id_seq', 3, true);


--
-- Name: teamsync_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.teamsync_id_seq', 1, false);


--
-- Name: torrentinfo_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.torrentinfo_id_seq', 1, false);


--
-- Name: uploadedblob_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.uploadedblob_id_seq', 1, false);


--
-- Name: user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.user_id_seq', 1, true);


--
-- Name: userorganizationquota_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.userorganizationquota_id_seq', 1, false);


--
-- Name: userprompt_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.userprompt_id_seq', 1, false);


--
-- Name: userpromptkind_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.userpromptkind_id_seq', 3, true);


--
-- Name: userregion_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.userregion_id_seq', 1, false);


--
-- Name: visibility_id_seq; Type: SEQUENCE SET; Schema: public; Owner: quay
--

SELECT pg_catalog.setval('public.visibility_id_seq', 2, true);


--
-- PostgreSQL database dump complete
--

